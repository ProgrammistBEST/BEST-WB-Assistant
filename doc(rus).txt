Проектная документация
Обзор
Этот проект представляет собой серверное приложение Node.js, взаимодействующее с базой данных SQLite. Сервер предоставляет несколько конечных точек для управления размерами продуктов, включая добавление, обновление, удаление и извлечение данных из базы данных. Проект использует фреймворк Express для обработки HTTP-запросов и библиотеку sqlite3для взаимодействия с базой данных SQLite.

Структура проекта
package.json: Содержит метаданные о проекте, включая зависимости и скрипты.
package-lock.json: Описывает дерево зависимостей для проекта.
server.js: Основной файл сервера, содержащий логику сервера и маршруты.
products.db: Файл базы данных SQLite, в котором хранятся размеры продукции.
Зависимости
Проект опирается на следующие модули Node.js:

express: Веб-фреймворк для Node.js.
body-parser: Промежуточное программное обеспечение для анализа тел входящих запросов.
sqlite3: Библиотека базы данных SQLite для Node.js.

Чтобы установить зависимости проекта, выполните:
npm install
Чтобы запустить сервер, выполните:
npm start
Сервер запустится и будет прослушивать порт 3000. По желанию порт можно изменить.

Конечные точки API
Получить все размеры продукта
URL:  /getModelArmbest
Метод:  GET
Описание: Извлекает все размеры продуктов из базы данных. 
Ответ:
json
[
  {
    "vendor_code": "string",
    "wb_size": "string",
    "pair": "string"
  },
  ...
]

Получить размер WB по артикулу
URL:  /getWbSize
Метод:  GET
Параметры запроса:
skus: SKU продукта. 
Описание: Извлекает размер WB для данного SKU. 
Ответ:
json
{
  "wb_size": "string"
}
Если артикул не найден, возвращается статус 404 с сообщением «Размер не найден».

Добавить новый размер продукта
URL:  /add-element
Метод:  POST
Параметры тела:
vendorcode: Код поставщика продукта.
wbsize: Размер WB продукта.
pair: Парная информация о продукте. 
Описание: Добавляет новый размер продукта в базу данных. 
Ответ:
json
{
  "success": true,
  "message": "Element added successfully"
}
В случае ошибки возвращается статус 500 с сообщением об ошибке.

Обновить размер продукта
URL:  /update-element
Метод:  POST
Параметры тела:

vendorcode: Код поставщика продукта.
wbsize: Размер WB продукта.
pair: Новая информация о паре продукта. 
Описание: Обновляет информацию о паре для указанного размера продукта. 
Ответ:
json
{
  "success": true,
  "message": "Data updated successfully",
  "changes": "number"
}
В случае ошибки возвращается статус 500 с сообщением об ошибке.

Удалить размер продукта
URL:  /delete-element
Метод:  POST
Параметры тела:

vendorcode: Код поставщика продукта.
wbsize: Размер WB продукта.
pair: Парная информация о продукте. 
Описание: Удаляет размер продукта из базы данных. 
Ответ:
json
{
  "success": true,
  "message": "Element deleted successfully"
}
Если элемент не найден, возвращается статус 404 с сообщением «Элемент не найден». В случае ошибки возвращается статус 500 с сообщением об ошибке.

Статические файлы
Сервер обслуживает статические файлы из publicкаталога. Чтобы добавить или изменить статические файлы, поместите их в publicкаталог.

Подключение к базе данных
Сервер подключается к базе данных SQLite, расположенной по адресу ./database/products.db. Соединение открывается при запуске сервера и закрывается при его завершении работы.

Обработка ошибок
Сервер регистрирует ошибки в консоли и возвращает соответствующие коды состояния HTTP и сообщения об ошибках в ответах.

Заключение
Этот проект предоставляет простой, но эффективный способ управления размерами продуктов в базе данных SQLite через сервер Node.js. Предоставленные конечные точки охватывают основные операции CRUD, необходимые для взаимодействия с размерами продуктов.
